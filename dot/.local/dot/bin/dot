#!/usr/bin/env zsh
#########################################
# dot: an utility for dotfiles management
#########################################

autoload dot_printf
autoload dot_printf_err
autoload dot_printf_setup
autoload dot_printf_uninstall
autoload dot_printf_warn
autoload dot_printf_clean


#########################################
# Essential variables
#########################################
dot_basedir=${DOT_PATH}/lib/dot
dot_installers_dir=${dot_basedir}/install.d
dot_prestow_dir=${dot_basedir}/pre-stow.d
dot_poststow_dir=${dot_basedir}/post-stow.d
dot_preunstow_dir=${dot_basedir}/pre-unstow.d
dot_postunstow_dir=${dot_basedir}/post-unstow.d
dot_ansible_playbook_dir=${HOME}/.ansible

#
# Update repository at DOT_HOME
#
dot_update() {
    dot_printf "Updating dotfiles git repository ..."
    git -C $DOT_HOME pull || true

    # stow all directories inside DOT_HOME
    dot_printf "Stowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_stow $( basename $d )
    done
    unset d

    # deploy all changes in the ansible playbook
    dot_deploy
}

_dot_stow() {
    local stow_dir=$1
    for i in "${@:2}"; do
        dot_printf "Stowing $i"
        # pre-stow invocation
        [ -e ${dot_prestow_dir}/$i ] && . ${dot_prestow_dir}/$i

        # Try to find the package inside dotfiles directory
        [ -d ${stow_dir}/$i ] && stow --verbose=1 -R -d $stow_dir -t $HOME $i

        # post-stow invocation
        [ -e ${dot_poststow_dir}/$i ] && . ${dot_poststow_dir}/$i
    done
}

_dot_unstow() {
    local stow_dir=$1
    for i in "${@:2}"; do
        dot_printf "Unstowing $i"
        # preunstow invocation
        [ -e ${dot_preunstow_dir}/$i ] && . ${dot_preunstow_dir}/$i

        # Try to find the package inside dotfiles directory
        [ -d ${stow_dir}/$i ] && stow --verbose=1 -D -d $stow_dir -t $HOME $i

        # postunstow invocation
        [ -e ${dot_postunstow_dir}/$i ] && . ${dot_postunstow_dir}/$i
    done
}


#
# This will automatically stow directories inside btsync main directory
#
dot_sync() {
    _dot_stow $dot_btsync_dir "$@"
}

#
# This will automatically stow directories inside btsync main directory
#
dot_desync() {
    _dot_unstow $dot_btsync_dir "$@"
}


#
# This will automatically unstow directories inside $DOT_HOME
#
dot_stow() {
    _dot_stow $DOT_HOME "$@"
}

#
# This will automatically unstow directories inside $DOT_HOME
#
dot_unstow() {
    _dot_unstow $DOT_HOME "$@"
}

#
# Update zsh environment and everything within it
#
dot_refresh() {
    dot_zsh_update # Update zsh environment
}

#
# Execute ansible playbook to deploy system-wide changes
#
dot_deploy() {
    dot_printf "Deploying playbook changes ..."
    cd $dot_ansible_playbook_dir && \
        ansible-galaxy install --force -r requirements.yml && \
        ansible-playbook site.yml -i inventory || exit 1
}

#
# Stow/install packages inside DOT_HOME
#
dot_install() {
    if [ -x ${dot_installers_dir}/$1 ]; then
        # install the actual thing
        dot_printf "Launching installer: $1"
        ${dot_installers_dir}/$1 ${@:3}
    fi
    if [ -d ${DOT_HOME}/$1 ]; then
        dot_stow $1 || exit 1
    fi
}

#
# Print help
#
dot_print_help() {
    echo "Usage: dot <COMMAND> <ARGUMENTS>"
    echo
    echo "  dot stow <package> - stow package(s)"
    echo "  dot unstow <package> - unstow package(s)"
    echo "  dot update - update git repo + reload everything"
    echo "  dot purge - purge every dotfile there is inside your home directory"
    echo
}

dot_purge() {
    #
    # warn the user first of all
    #
    dot_printf_warn "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "This is really going to assf*ck your home directory ..."
    dot_printf_warn "It will unstow everything, remove any remaining"
    dot_printf_warn "dot files inside your home directory and then reboot"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    dot_printf_warn "ARE YOU REALLY SURE ABOUT THIS? (y/N)> "
    read -sq ans
    [ $ans != 'y' ] && dot_printf "Aborting operation ..." &&  exit 0
    unset answer

    # unstow all directories inside DOT_HOME
    dot_printf "Unstowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_unstow $( basename $d )
    done
    unset d

    # kill both bsync and syncd before unstowing
    dot_printf "kill both bsync and syncd before unstowing"
    kill -ILL $(pidof btsync) &> /dev/null || true
    kill -ILL $(ps -xo pid,cmd 2> /dev/null | grep syncd | grep sh | awk '{print $1}' | tr '\n' ' ') &> /dev/null || true

    # unstow all directories inside DOT_HOME
    dot_printf "Unstowing all packages inside $dot_btsync_dir"
    for d in $dot_btsync_dir/*; do
        dot_desync $( basename $d )
    done
    unset d

    # Purge every dotfile thereis in your home directory
    dot_printf_warn "Purging all your dotfiles inside your home directory at $HOME"
    sudo rm $DOT_HOME
    sudo rm -rf ${HOME}/.[a-zA-Z]*

    # Reboot system
    dot_printf "Rebooting system ..."
    sudo shutdown -r now
}
# The main thing
if [[ $ZSH_EVAL_CONTEXT == 'toplevel' ]]; then
    # I'm not being sourced!, so ...
    case $1 in
        install)
            dot_install ${@:2}
            ;;
        stow)
            dot_stow ${@:2}
            ;;
        deploy)
            dot_deploy
            ;;
        unstow)
            dot_unstow ${@:2}
            ;;
        update)
            dot_update ${@:2}
            ;;
        purge)
            dot_purge ${@:2}
            ;;
        *)
            dot_print_help; exit 1
            ;;
    esac
    dot_printf "Done!"
    exit 0
fi
