#!/usr/bin/env zsh
#########################################
# dot: an utility for dotfiles management
#########################################

autoload dot_printf
autoload dot_printf_err
autoload dot_printf_setup
autoload dot_printf_uninstall
autoload dot_printf_warn
autoload dot_printf_clean


#########################################
# Essential variables
#########################################
dot_basedir=${DOT_PATH}/lib/dot
dot_installers_dir=${dot_basedir}/install.d
dot_prestow_dir=${dot_basedir}/pre-stow.d
dot_poststow_dir=${dot_basedir}/post-stow.d
dot_preunstow_dir=${dot_basedir}/pre-unstow.d
dot_postunstow_dir=${dot_basedir}/post-unstow.d
dot_ansible_playbook_dir=${HOME}/.ansible

#
# Update repository at DOT_HOME
#
dot_update() {
    dot_printf "Updating dotfiles git repository ..."
    git -C $DOT_HOME pull || true

    # stow all directories inside DOT_HOME
    dot_printf "Stowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_stow $( basename $d )
    done
    unset d

    # deploy all changes in the ansible playbook
    dot_deploy
}

_dot_stow() {
    local stow_dir=$1
    for i in "${@:2}"; do
        dot_printf "Stowing $i"
        # pre-stow invocation
        [ -e ${dot_prestow_dir}/$i ] && . ${dot_prestow_dir}/$i

        # Try to find the package inside dotfiles directory
        [ -d ${stow_dir}/$i ] && stow --verbose=1 -R -d $stow_dir -t $HOME $i

        # post-stow invocation
        [ -e ${dot_poststow_dir}/$i ] && . ${dot_poststow_dir}/$i
    done
}

_dot_unstow() {
    local stow_dir=$1
    for i in "${@:2}"; do
        dot_printf "Unstowing $i"
        # preunstow invocation
        [ -e ${dot_preunstow_dir}/$i ] && . ${dot_preunstow_dir}/$i

        # Try to find the package inside dotfiles directory
        [ -d ${stow_dir}/$i ] && stow --verbose=1 -D -d $stow_dir -t $HOME $i

        # postunstow invocation
        [ -e ${dot_postunstow_dir}/$i ] && . ${dot_postunstow_dir}/$i
    done
}


#
# This will automatically unstow directories inside $DOT_HOME
#
dot_stow() {
    _dot_stow $DOT_HOME "$@"
}

#
# This will automatically unstow directories inside $DOT_HOME
#
dot_unstow() {
    _dot_unstow $DOT_HOME "$@"
}

#
# Execute ansible playbook to deploy system-wide changes
#
dot_deploy() {
    dot_printf "Deploying playbook changes ..."
    cd $dot_ansible_playbook_dir && \
        ansible-galaxy install --force -r requirements.yml && \
        ansible-playbook site.yml -i inventory || exit 1
}

#
# Stow/install packages inside DOT_HOME
#
dot_install() {
    if [ -x ${dot_installers_dir}/$1 ]; then
        # install the actual thing
        dot_printf "Launching installer: $1"
        ${dot_installers_dir}/$1 ${@:3}
    fi
    if [ -d ${DOT_HOME}/$1 ]; then
        dot_stow $1 || exit 1
    fi
}

#
# Print help
#
dot_print_help() {
    echo "Usage: dot <COMMAND> <ARGUMENTS>"
    echo
    echo "  dot stow <package> - stow package(s)"
    echo "  dot unstow <package> - unstow package(s)"
    echo "  dot update - update git repo + reload everything"
    echo "  dot purge - purge every dotfile there is inside your home directory"
    echo
}



dot_purge() {
    #
    # warn the user first of all
    #
    dot_printf_warn "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "This is really going to assf*ck your home directory ..."
    dot_printf_warn "It will unstow everything, remove any remaining"
    dot_printf_warn "dot files inside your home directory and then reboot"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    dot_printf_warn "ARE YOU REALLY SURE ABOUT THIS? (y/N)> "
    read -sq ans
    [ $ans != 'y' ] && dot_printf "Aborting operation ..." &&  exit 0
    unset answer

    # unstow all directories inside DOT_HOME
    dot_printf "Unstowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_unstow $( basename $d )
    done
    unset d

    # kill both syncthing and fsync before unstowing
    dot_printf "kill both syncthing and fsync before unstowing"
    sudo systemctl stop syncthing@${USER}.service
    kill -ILL $(ps -xo pid,cmd 2> /dev/null | grep fsync | grep sh | awk '{print $1}' | tr '\n' ' ') &> /dev/null || true

    ########################################################
    # dot_ignore includes all folders/files not to be purged
    ########################################################
    dot_ignore="${HOME}/.dotignore"
    if [ -a ${HOME}/.dotignore ]; then
        for f in $(cat ${HOME}/.dotignore | tr '\n' ' '); do
            # all directories are considered to be relative
            # to the $HOME directory
            dot_ignore="$dot_ignore ${HOME}/${f}"
        done
        unset f
    fi

    # unstow all directories inside all specified STOW_DIRS
    for stow_dir in $(echo $STOW_DIRS | tr ':' ' '); do
        dot_printf "Unstowing all packages inside $stow_dir"
        for d in $stow_dir/*; do
            _dot_unstow $stow_dir $(basename $d)
        done
        unset d
        # all STOW_DIRS are ignored for purging
        # Reason: there could be dotfolders being treated and sync dirs
        # it wouldn't be nice to treat them as spare dotfolders/files
        dot_ignore="$dot_ignore $stow_dir"
    done
    unset stow_dir

    # Purge every dotfile thereis in your home directory
    dot_printf_warn "Purging all your dotfiles inside your home directory at $HOME"
    sudo rm $DOT_HOME

    # Perform the actual deletion of dotfiles/folders
    # with the clear exception of those ignored
    for rd in $HOME/.*; do
        if test "${dot_ignore#*$rd}" != "$dot_ignore"; then
            dot_printf_warn "$rd on ignore list, therefore not deleted"
            continue
        fi
        dot_printf "Deleting $rd"
        sudo rm -rf $rd # if not ignored, then purge it
    done
    unset rd

    # Reboot system
    dot_printf "Rebooting system ..."
    sudo shutdown -r now
}
# The main thing
if [[ $ZSH_EVAL_CONTEXT == 'toplevel' ]]; then
    # I'm not being sourced!, so ...
    case $1 in
        install)
            dot_install ${@:2}
            ;;
        stow)
            dot_stow ${@:2}
            ;;
        deploy)
            dot_deploy
            ;;
        unstow)
            dot_unstow ${@:2}
            ;;
        update)
            dot_update ${@:2}
            ;;
        purge)
            dot_purge ${@:2}
            ;;
        *)
            dot_print_help; exit 1
            ;;
    esac
    dot_printf "Done!"
    exit 0
fi
