#!/usr/bin/env zsh
#########################################
# dot: an utility for dotfiles management
#########################################

autoload dot_printf
autoload dot_printf_err
autoload dot_printf_setup
autoload dot_printf_uninstall
autoload dot_printf_warn
autoload dot_printf_clean


#
# Essential variables
dot_basedir=${DOT_PATH}/lib/dot
dot_installers_dir=${dot_basedir}/install.d
dot_prestow_dir=${dot_basedir}/pre-stow.d
dot_poststow_dir=${dot_basedir}/post-stow.d
dot_preunstow_dir=${dot_basedir}/pre-unstow.d
dot_postunstow_dir=${dot_basedir}/post-unstow.d
dot_ansible_playbook_dir=${HOME}/.ansible
dot_btsync_dir=${HOME}/.dotsync

dot_zsh_update() {
    # Update environment after everything has been done
    dot_printf "Updating zsh environment ..."
    . ${HOME}/.zshenv
    . ${HOME}/.zshrc
}

#
# Update repository at DOT_HOME
#
dot_update() {
    dot_printf "Updating dotfiles git repository ..."
    git -C $DOT_HOME pull || true

    # stow all directories inside DOT_HOME
    dot_printf "Stowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_stow $( basename $d )
    done
    unset d

    # deploy all changes in the ansible playbook
    dot_printf "Deploying all changes in the ansible playbook"
    dot_deploy

    dot_zsh_update # Update zsh environment
}

#
# This will automatically stow directories inside $DOT_HOME
#
dot_stow() {
    for i in "$@"; do
        dot_printf "Stowing $i"
        [ -e ${dot_prestow_dir}/$i ] && . ${dot_prestow_dir}/$i # pre-stow invocation

        # Try to find the package inside btsync directory
        [ -d ${dot_btsync_dir}/$i ] && stow --verbose=1 -R -d $dot_btsync_dir -t $HOME $i
        # Try to find the package inside dotfiles directory
        [ -d ${DOT_HOME}/$i ] && stow --verbose=1 -R -d $DOT_HOME -t $HOME $i

        [ -e ${dot_poststow_dir}/$i ] && . ${dot_poststow_dir}/$i # post-stow invocation
    done
}

#
# This will automatically unstow directories inside $DOT_HOME
#
dot_unstow() {
    for i in "$@"; do
        dot_printf "Unstowing $i"
        [ -e ${dot_preunstow_dir}/$i ] && . ${dot_preunstow_dir}/$i # postunstow invocation
        [ -d ${DOT_HOME}/$i ] && stow --verbose=1 -D -d $DOT_HOME -t $HOME $i
        [ -e ${dot_postunstow_dir}/$i ] && . ${dot_postunstow_dir}/$i # postunstow invocation
    done
}

#
# Update zsh environment and everything within it
#
dot_refresh() {
    dot_zsh_update # Update zsh environment
}

#
# Execute ansible playbook to deploy system-wide changes
#
dot_deploy() {
    cd $dot_ansible_playbook_dir && \
        ansible-playbook site.yml -i inventory || exit 1
}

#
# Stow/install packages inside DOT_HOME
#
dot_install() {
    if [ -x ${dot_installers_dir}/$1 ]; then
        # install the actual thing
        ${dot_installers_dir}/$1 ${@:3}
    fi
    if [ -d ${DOT_HOME}/$1 ]; then
        dot_stow $1 || exit 1
    fi
    dot_zsh_update # Update zsh environment
}

#
# Print help
#
dot_print_help() {
    echo "Usage: dot <COMMAND> <ARGUMENTS>"
    echo
    echo "  dot stow <package> - Stow package(s)"
    echo "  dot unstow <package> - Unstow package(s)"
    echo "  dot reload|refresh - Reload zsh environment"
    echo "  dot update - Update git repo + reload everything"
    echo "  dot purge - Purge every dotfile there is inside your home directory"
}

dot_purge() {
    #
    # warn the user first of all
    #
    dot_printf_warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "This is really going to assf*ck your home directory ..."
    dot_printf_warn "It will unstow everything and remove any remaining"
    dot_printf_warn "dot files inside your home directory and then reboot"
    dot_printf_warn "-------------------------------------------------------"
    dot_printf_warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    dot_printf_warn "ARE YOU REALLY SURE ABOUT THIS? (y/N)> "
    read -sq ans
    [ $ans != 'y' ] && dot_printf "Aborting operation ..." &&  exit 0
    unset answer

    # unstow all directories inside DOT_HOME
    dot_printf "Unstowing all packages inside $DOT_HOME"
    for d in $DOT_HOME/*; do
        dot_unstow $( basename $d )
    done
    unset d

    # Purge every dotfile thereis in your home directory
    sudo rm $DOT_HOME
    sudo rm -rf ${HOME}/.[a-zA-Z]*

    # Reboot system
    dot_printf "Rebooting system ..."
    sudo shutdown -r now
}
# The main thing
case $1 in
    install)
        dot_install ${@:2}
        ;;
    stow)
        dot_stow ${@:2}
        ;;
    deploy)
        dot_deploy
        ;;
    unstow)
        dot_unstow ${@:2}
        ;;
    refresh|reload)
        dot_refresh
        ;;
    update)
        dot_update ${@:2}
        ;;
    purge)
        dot_purge ${@:2}
        ;;
    *)
        dot_print_help; exit 1
        ;;
esac

dot_printf "Done!"
exit 0
