#!/usr/bin/env zsh
#########################################
# dot: an utility for dotfiles management
#########################################

autoload dot_printf
autoload dot_printf_err
autoload dot_printf_setup
autoload dot_printf_uninstall
autoload dot_printf_warn
autoload dot_printf_clean


#########################################
# Essential variables
#########################################
dot_basedir=${DOT_PATH}/lib/dot
dot_prestow_dir=${dot_basedir}/pre-stow.d
dot_poststow_dir=${dot_basedir}/post-stow.d
dot_preunstow_dir=${dot_basedir}/pre-unstow.d
dot_postunstow_dir=${dot_basedir}/post-unstow.d

# This is a record of the command line
# mostly used by dotfiles update job
_dot_cmd=$0 # cmd name
_dot_args=$@ # arguments

_dot_stow() {
    local stow_dir=$1
    for i in "${@:2}"; do
        dot_printf "Stowing $i from $stow_dir"
        if [ -d ${stow_dir}/$i ]; then
            # pre-stow invocation
            [ -e ${dot_prestow_dir}/$i ] && . ${dot_prestow_dir}/$i

            # Try to find the package inside dotfiles directory
            stow --verbose=1 -R -d $stow_dir -t $HOME $i --ignore=dropbox

            # post-stow invocation
            [ -e ${dot_poststow_dir}/$i ] && . ${dot_poststow_dir}/$i
        else
            dot_printf_warn "$i@$stow_dir: package is invalid or nonexistent"
        fi
    done
}

_dot_unstow() {
    local stow_dir=$1
    local invalid_stow_dir=0
    for i in "${@:2}"; do
        dot_printf "Unstowing $i from $stow_dir"

        # Certain "essential" stow directories can't be unstowed, otherwise
        # this whole thing would just be screwed up from that point, or at least
        # not easy to recover from.
        invalid_stow_dir=0
        [[ "$i" == "dot" ]] && invalid_stow_dir=1
        [[ "$i" == "essentials" ]] && invalid_stow_dir=1
        [[ "$invalid_stow_dir" == 1 ]] && dot_printf_warn "$i is not allowed to be unstowed" && continue

        if [ -d ${stow_dir}/$i ]; then
            # preunstow invocation
            [ -e ${dot_preunstow_dir}/$i ] && . ${dot_preunstow_dir}/$i

            # Try to find the package inside dotfiles directory
            stow --verbose=1 -D -d $stow_dir -t $HOME $i --ignore=dropbox

            # postunstow invocation
            [ -e ${dot_postunstow_dir}/$i ] && . ${dot_postunstow_dir}/$i
        else
            dot_printf_warn "$i@$stow_dir: package is invalid or nonexistent"
        fi
    done
}


#
# This will automatically unstow directories inside $DOT_HOME
#
dot_stow() {
    # First of all, try to stow from STOW_DIRS set by the user
    for stow_dir in $(echo $STOW_DIRS | tr ':' ' '); do
        _dot_stow $stow_dir "$@"
    done
    # Then apply the same thing on DOT_HOME
    _dot_stow $DOT_HOME "$@"
}

#
# This will automatically unstow directories inside $DOT_HOME
#
dot_unstow() {
    # First of all, try to unstow from STOW_DIRS set by the user
    for stow_dir in $(echo $STOW_DIRS | tr ':' ' '); do
        _dot_unstow $stow_dir "$@"
    done
    # Then apply the same thing on DOT_HOME
    _dot_unstow $DOT_HOME "$@"
}

#
# Print help
#
dot_print_help() {
    dot_printf "Usage: dot <command> <arguments>"
    dot_printf
    dot_printf "  dot stow   <package> - stow package(s)"
    dot_printf "  dot unstow <package> - unstow package(s)"
    dot_printf "  dot update <package> - update specific configurations"
    dot_printf "  dot help   <command> - help information about a command"
    echo
}

# dot help update
_dot_help_update() {
    dot_printf "Usage: update <update_job>"
    dot_printf "Apply arbitrary update jobs"
    dot_printf "Where <update_job> can be one of the following:"
    for update_job in $dot_update_dir/*; do
        if [[  -h $update_job  ]]; then
            . $update_job
            dot_printf "    $(basename $update_job) - $(_dot_update_help)"
            # make sure the callback function is removed afterwards
            unset -f _dot_update_help
        fi
    done
}

# dot help stow
_dot_help_stow() {
    dot_printf "Usage: stow <package> ..."
    dot_printf "Stow a package from all stow directories in STOW_DIRS"
}

# dot help unstow
_dot_help_unstow() {
    dot_printf "Usage: unstow <package> ..."
    dot_printf "Unstow a package from all stow directories in STOW_DIRS"
}

#
# Print command-specific help
#
dot_help() {
    if [[ ! -z "$1" ]]; then
        case $1 in
            unstow )
            _dot_help_unstow
            ;;
            stow )
            _dot_help_stow
            ;;
        esac
    else
        dot_print_help
    fi
}

################
# The main thing
################
if [[ $ZSH_EVAL_CONTEXT == 'toplevel' ]]; then
    # I'm not being sourced!, so ...
    case $1 in
        stow)
            dot_stow ${@:2}
            ;;
        unstow)
            dot_unstow ${@:2}
            ;;
        help)
            dot_help ${@:2}
            ;;
        *)
            dot_print_help; exit 1
            ;;
    esac
    dot_printf "Done!"
    exit 0
fi
