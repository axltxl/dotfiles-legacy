#!/usr/bin/env zsh
##################################
# Install termite
##################################

autoload dot_printf
autoload dot_printf_install

# libvte build variables
vte_git=https://github.com/thestinger/vte-ng
vte_src=~/Projects/vte-ng
vte_opts=(\
    --prefix=$DOT_PATH \
    )

# The actual variables for termite compilation
termite_git=https://github.com/thestinger/termite.git
termite_src=~/Projects/termite
termite_deps=( \
    gperf \
    gtk-doc-tools \
    libgtk2.0-dev \
    )

# Now, we do the thing
dot_printf_install "termite dependencies"
sudo apt-get install gtk-doc-tools libglib2.0-dev gobject-introspection valac \
	libpango1.0-dev libgtk-3-dev libgnutls28-dev \
	libgirepository1.0-dev libxml2-utils gperf
sudo apt-get install -y ${termite_deps[@]}

# Clone/pull the repo
dot_printf "clone libvte-ng git repository"
if [ ! -d $vte_src ]; then
    git clone $vte_git $vte_src
else
    git -C $vte_src pull
fi || exit 1

# Compile libvte-ng
dot_printf "compile and install libvte-ng"
cd $vte_src
[ ! -x configure ] && ./autogen.sh
./configure "${vte_opts[@]}" && make clean  && make && make install || exit 1


# Now, we do the thing
dot_printf_install "termite"

# Clone/pull the repo
dot_printf "clone termite git repository"
if [ ! -d $termite_src ]; then
    git clone --recursive $termite_git $termite_src
else
    git -C $termite_src pull
    git submodule update
fi || exit 1

# Compile and install termite
dot_printf "compile and install termite"
cd $termite_src && make PREFIX="${DOT_PATH}" install || exit 1
