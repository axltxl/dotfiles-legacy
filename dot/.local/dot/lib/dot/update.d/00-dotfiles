# vim: ft=zsh
############################
# Update main git repository
############################

_dot_update_help() {
    echo "update dotfiles main git repository"
}

_dot_update_exec() {
    # current checksum of dot script
    # this is used by self-update, see below
    _dot_sum=$(md5sum $_dot_cmd)

    dot_printf "checking for unsaved changes"
    # stash any changes should they are present
    git -C $DOT_HOME stash save

    dot_printf "checking out '${DOT_BRANCH}'"
    # check out current DOT_BRANCH
    git -C $DOT_HOME checkout $DOT_BRANCH || true

    # make sure local DOT_BRANCH is following upstream
    git -C $DOT_HOME branch --set-upstream-to=origin/${DOT_BRANCH} $DOT_BRANCH > /dev/null || true

    # pull changes from upstream
    dot_printf "pulling latest changes from upstream"
    git -C $DOT_HOME pull || true

    # self-update:
    # dot cannot be executed if it's changed after git-checkout
    # if this were to be the case, dot replaces itself with the
    # current version of the script, this will ensure two case
    # scenarios:
    # 1. In which dot will run only on its corresponding git branch, that
    #    is to say, a version of dot from branch a won't run on branch b
    # 2. self-update capability of dot script itself
    if [[ "$_dot_sum" != "$(md5sum $_dot_cmd)" ]]; then
        dot_printf_warn "dot command has changed, start over again ..."
        exec dot ${=_dot_args} # http://unix.stackexchange.com/questions/19530/expanding-variables-in-zsh
    else
        dot_printf "no self-update necessary"
    fi

    # cleanup after everything
    unset _dot_sum
}
